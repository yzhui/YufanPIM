package com.sailmi.sailplat.foundation.domain;
// Generated 2019-3-19 16:57:19 by Hibernate Tools 5.2.11.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * TblDynamic generated by hbm2java
 */
@Entity
@Table(name = "tbl_dynamic", catalog = "sailplat")
public class TblDynamic implements java.io.Serializable {

	private Long id;
	private TblAccessory tblAccessory;
	private TblDynamic tblDynamicByTurnParentId;
	private TblDynamic tblDynamicByDissParentId;
	private TblGoods tblGoods;
	private TblStore tblStore;
	private TblUser tblUser;
	private Date addTime;
	private boolean deleteStatus;
	private String content;
	private Integer discussNum;
	private Integer praiseNum;
	private Integer turnNum;
	private Boolean locked;
	private Boolean display;
	private Set<TblDynamic> tblDynamicsForTurnParentId = new HashSet<TblDynamic>(0);
	private Set<TblDynamic> tblDynamicsForDissParentId = new HashSet<TblDynamic>(0);

	public TblDynamic() {
	}

	public TblDynamic(boolean deleteStatus) {
		this.deleteStatus = deleteStatus;
	}

	public TblDynamic(TblAccessory tblAccessory, TblDynamic tblDynamicByTurnParentId,
			TblDynamic tblDynamicByDissParentId, TblGoods tblGoods, TblStore tblStore, TblUser tblUser, Date addTime,
			boolean deleteStatus, String content, Integer discussNum, Integer praiseNum, Integer turnNum,
			Boolean locked, Boolean display, Set<TblDynamic> tblDynamicsForTurnParentId,
			Set<TblDynamic> tblDynamicsForDissParentId) {
		this.tblAccessory = tblAccessory;
		this.tblDynamicByTurnParentId = tblDynamicByTurnParentId;
		this.tblDynamicByDissParentId = tblDynamicByDissParentId;
		this.tblGoods = tblGoods;
		this.tblStore = tblStore;
		this.tblUser = tblUser;
		this.addTime = addTime;
		this.deleteStatus = deleteStatus;
		this.content = content;
		this.discussNum = discussNum;
		this.praiseNum = praiseNum;
		this.turnNum = turnNum;
		this.locked = locked;
		this.display = display;
		this.tblDynamicsForTurnParentId = tblDynamicsForTurnParentId;
		this.tblDynamicsForDissParentId = tblDynamicsForDissParentId;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "img_id")
	public TblAccessory getTblAccessory() {
		return this.tblAccessory;
	}

	public void setTblAccessory(TblAccessory tblAccessory) {
		this.tblAccessory = tblAccessory;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "turnParent_id")
	public TblDynamic getTblDynamicByTurnParentId() {
		return this.tblDynamicByTurnParentId;
	}

	public void setTblDynamicByTurnParentId(TblDynamic tblDynamicByTurnParentId) {
		this.tblDynamicByTurnParentId = tblDynamicByTurnParentId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "dissParent_id")
	public TblDynamic getTblDynamicByDissParentId() {
		return this.tblDynamicByDissParentId;
	}

	public void setTblDynamicByDissParentId(TblDynamic tblDynamicByDissParentId) {
		this.tblDynamicByDissParentId = tblDynamicByDissParentId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "goods_id")
	public TblGoods getTblGoods() {
		return this.tblGoods;
	}

	public void setTblGoods(TblGoods tblGoods) {
		this.tblGoods = tblGoods;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "store_id")
	public TblStore getTblStore() {
		return this.tblStore;
	}

	public void setTblStore(TblStore tblStore) {
		this.tblStore = tblStore;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "user_id")
	public TblUser getTblUser() {
		return this.tblUser;
	}

	public void setTblUser(TblUser tblUser) {
		this.tblUser = tblUser;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "addTime", length = 19)
	public Date getAddTime() {
		return this.addTime;
	}

	public void setAddTime(Date addTime) {
		this.addTime = addTime;
	}

	@Column(name = "deleteStatus", nullable = false)
	public boolean isDeleteStatus() {
		return this.deleteStatus;
	}

	public void setDeleteStatus(boolean deleteStatus) {
		this.deleteStatus = deleteStatus;
	}

	@Column(name = "content")
	public String getContent() {
		return this.content;
	}

	public void setContent(String content) {
		this.content = content;
	}

	@Column(name = "discussNum")
	public Integer getDiscussNum() {
		return this.discussNum;
	}

	public void setDiscussNum(Integer discussNum) {
		this.discussNum = discussNum;
	}

	@Column(name = "praiseNum")
	public Integer getPraiseNum() {
		return this.praiseNum;
	}

	public void setPraiseNum(Integer praiseNum) {
		this.praiseNum = praiseNum;
	}

	@Column(name = "turnNum")
	public Integer getTurnNum() {
		return this.turnNum;
	}

	public void setTurnNum(Integer turnNum) {
		this.turnNum = turnNum;
	}

	@Column(name = "locked")
	public Boolean getLocked() {
		return this.locked;
	}

	public void setLocked(Boolean locked) {
		this.locked = locked;
	}

	@Column(name = "display")
	public Boolean getDisplay() {
		return this.display;
	}

	public void setDisplay(Boolean display) {
		this.display = display;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "tblDynamicByTurnParentId")
	public Set<TblDynamic> getTblDynamicsForTurnParentId() {
		return this.tblDynamicsForTurnParentId;
	}

	public void setTblDynamicsForTurnParentId(Set<TblDynamic> tblDynamicsForTurnParentId) {
		this.tblDynamicsForTurnParentId = tblDynamicsForTurnParentId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "tblDynamicByDissParentId")
	public Set<TblDynamic> getTblDynamicsForDissParentId() {
		return this.tblDynamicsForDissParentId;
	}

	public void setTblDynamicsForDissParentId(Set<TblDynamic> tblDynamicsForDissParentId) {
		this.tblDynamicsForDissParentId = tblDynamicsForDissParentId;
	}

}
